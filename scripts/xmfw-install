#!/bin/bash

set -e

# ## ## ## ## ## ## ## ## ##
## colors and logging

red="\e[0;91m"
green="\e[0;92m"
yellow="\e[0;93m"
bold="\e[1m"
reset="\e[0m"

vlog() {
	[ "$verbose" == "yes" ] && echo -e " > $1$reset" >&2
}

error() {
	echo -e "$red >> $1$reset" >&2
}

warn() {
	echo -e "$yellow >> $1$reset" >&2
}

info() {
	echo -e "$green >> $1$reset" >&2
}

usage() {
	printf "Usage: xmfw-install [-mvc] " >&2
	printf "[-i CONFIG_IMPORT_PATH] " >&2
	printf "[-o CONFIG_EXPORT_PATH] " >&2
	printf "<xtratum build image> [system base image]\n" >&2
}

# ## ## ## ## ## ## ## ## ##
##  Cleanup

# This part is very important
# It ensures that upon any error the script will remain idempotent

cleanup() {
	vlog "Cleaning up..."

	if [ -n "$build_cont" ]; then
		docker rm $build_cont
	fi

	if [ -n "$system_cont" ]; then
		docker rm $system_cont
	fi

	if [ -n "$tmpdir" ]; then
		rm -r $tmpdir
	fi
}

trap cleanup 0 1 2 3 6 15

# ## ## ## ## ## ## ## ## ##


# ## ## ## ## ## ## ## ## ##
## Global variables

menu=
verbose="no"
config="no"

import_config=
export_config=

build_image=
system_image=

tmpdir=

build_cont=
system_cont=

toolchain=

# ## ## ## ## ## ## ## ## ##


# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## 
##  Toolchain questioning utilities

ask_toolchain_root() {
	prompt='Please specify the toolchain path (if not specified use the default, may not work): '
	read -e -p "$prompt" path >&2
	echo -n "$path"
}

ask_toolchain_binaries() {
	prompt='Please specify where the toolchain binaries are (absolute path or relative to the toolchain): ' 
	read -e -p "$prompt" path >&2
	echo -n "$path"
}

ask_toolchain() {
	toolchain=$(ask_toolchain_root)
	toolchain=${toolchain%%/}
	
	if [ -z "$toolchain" ]; then
		return 0
	fi

	toolchain_bin=$(ask_toolchain_binaries)
	toolchain_bin=${toolchain_bin%%/}

	case $toolchain_bin in
		/*) 
			if [ -z "$(echo "$toolchain_bin" | grep "$toolchain")" ]; then
				error "Toolchain binaries path $toolchain is not in toolchain path $toolchain!"
				exit 1
			fi

			toolchain_bin=$(echo "$toolchain_bin" | sed 's,'"$toolchain"'/,,g')

			;;
		*)
			if [ ! -d "$toolchain" ]; then
				error "Toolchain path $toolchain is not a directory!"
				exit 1
			fi
			if [ ! -d "$toolchain/$toolchain_bin" ]; then
				error "Toolchain binaries path $toolchain is not a directory!"
				exit 1
			fi
			;;
	esac
}

# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## 


# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## 
## check_image_name() function

# This function checks that the image name passed as an argument
# follows the conventions of xmfw

check_image_name() {
	image_name="$1"

	# name of the container. must be ``xmfw''
	# repository and tags are stripped
	xmfw=${image_name#*/}
	xmfw=${xmfw%:*}

	if ! [[ "$xmfw" == "xmfw" ]]; then
		return 1;
	else
		return 0;
	fi
}

# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## 


# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## 
## build() function

# This function creates a container to build XtratuM.

# For this, it must construct a command line for the container according
# to the options specified by the user. In this command line the config
# and build scripts inside the container must be called specifying
# appropiate options

build() {

	if [ "$config" != "yes" ]; then
		ask_toolchain
	fi


	# architecture
	arch=

	# flag activating export
	expflag=

	# flag activating import
	impflag=

	# flag specifying the toolchain
	toolchain_opt=

	# extract arch from conventional name
	arch=${build_image#*:*-}
	arch=${arch%%-*}

	# if the toolchain has not been specified, don't specify it in the
	# config options so that the container's default toolchain is used
	if [ -n "$toolchain" ]; then
		toolchain_mount="-v $(readlink -f "$toolchain"):/opt/toolchain"
		toolchain_opt="-p /opt/toolchain/$toolchain_bin"
	fi

	if [ -n "$export_config" ]; then
		expflag="-o"
	fi

	if [ -n "$import_config" ]; then
		impflag="-i"
	fi

	info $bold'Building XtratuM...'
	info "using image: $build_image"

	info "architecture configuration: $arch"

	# build confic cli
	printf -v ccli "config -a %s %s %s %s %s" \
		$arch \
		$toolchain_opt \
		$impflag \
		$expflag \
		$menu

	# if config-only, do not call build
	# TODO does not work on ia32
	if [ "$config" != "yes" ]; then
		printf -v bcli "%s" "build"
	else
		printf -v bcli "%s" "true"
	fi

	# final cli for the container
	printf -v cmdline "%s && %s && return 0" "$ccli" "$bcli"
	vlog "container cli: $bold$cmdline"

	# create build container
	build_cont=$(docker create \
			-it \
			$toolchain_mount \
			$build_image \
			sh -c "$cmdline" || return 1)


	# if specified, import configuration to the container
	if [ -n "$impflag" ]; then
		if [ -f "$import_config" ]; then
			info "Importing configuration from: $bold$import_config"
			docker cp "$import_config" $build_cont:/opt/config.tar.gz || return 1
		else
			error "Configuration file $import_config is not a file!"
			return 1
		fi
	fi

	# execute the container
	docker start -i $build_cont || return 1

	# if specified, export configuration from the container
	if [ -n "$expflag" ]; then
		info "Exporting configuration to: $bold$export_config"
		mkdir -p "$(dirname "$export_config")"
		docker cp $build_cont:/opt/config.tar.gz "$export_config" || return 1
	fi
}

# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## 


# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## 
## install() function

# This function generates the final image by creating a container off the base
# image, then copying the generated installation script to the container,
# and then commiting the container into the new image

install() {
	base_image="$system_image"

	# if the system base image is a xtratum build image,
	# choose conventional name;
	# else, name the system build image according to its base
	if check_image_name $system_image; then
		system_image="xmfw-system:${build_image#*:}"
	else
		system_image="xmfw-$(echo $system_image | sed 's/:/-/g')-system:${build_image#*:}"
	fi

	info $bold"Installing XtratuM in new image $system_image..."

	vlog "Creating temporary system container"
	system_cont=$(docker create -it "$base_image" /opt/xm-install || return 1)

	vlog "Copying installation script"
	docker cp $build_cont:/opt/xm-install $tmpdir || return 1
	docker cp $tmpdir/xm-install $system_cont:/opt/ || return 1

	vlog "Copying defaults"
	docker cp $build_cont:/usr/share/defaults $tmpdir/defaults || return 1
	docker cp $tmpdir/defaults $system_cont:/usr/share/ || return 1

	vlog "Creating final image"
	docker commit $system_cont "$system_image" || return 1
}

# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## 


# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## 
## Main script flow

# Options
while getopts mcvi:o: opt; do
	case $opt in
		m) menu="menu" ;;
		v) verbose="yes" ;;
		i) import_config="$OPTARG" ;;
		o) export_config="$OPTARG" ;;
		c) config="yes" ;;
		?) exit 1 ;;
	esac
done
shift $(($OPTIND - 1))

build_image="$1"
system_image="$2"

# check silent build option
if [ "$config" == "yes" ]; then
	if [ -n "$export_config" ]; then
		warn "${bold}Silent build!${reset} XtratuM will not be built, just configured"
	else
		# exit if silent build without exporting specified
		error "Silent build was specified, but no export will be performed. Aborting."
		exit 1
	fi
fi

# check that build image argument is present
if [ -z "$build_image" ]; then
	usage 
	exit 2
fi

# check convention on build image
if ! check_image_name "$build_image"; then
	error "Image $build_image does not follow the naming convention."
	error "If you are$bold really$reset$red sure that it is an image valid to use with xmfw, please rename it to the format ${bold}[repo/]xmfw:[x.y.z]-[arch][-name]$reset"
	exit 2
fi

# if system image is not specified, use build image
if [ -z "$system_image" ]; then
	system_image="$build_image";
fi

tmpdir=$(mktemp -d)

# Perform build and install
build   || { error 'XtratuM could not build! Have you set up your toolchain correctly?'; exit 1; }
if [ "$config" != "yes" ]; then
	install || { error 'There was an error during instalation!'; exit 1; }
fi

# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## 
